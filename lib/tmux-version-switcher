#!/usr/bin/env bash

set -e
APPNAME="$( basename $0 )"

tmuxvs:main() {
    SESSION="sync-$TMUXVS_TOOL"

    cmd="$1"
    args=("$@")

    if [[ ${#args[@]} -eq 0 ]]; then
        local error="tmuxvs:errorarg:$TMUXVS_TOOL"
        type "$error" &> /dev/null && "$error" || tmuxvs:errorarg
        exit;
    elif [[ "$cmd" != "run" ]] && [[ "$cmd" != "local" ]] && [[ "$cmd" != "exec" ]]; then
        local error="tmuxvs:errorarg:$TMUXVS_TOOL"
        type "$error" &> /dev/null && "$error" || tmuxvs:errorarg
        exit;
    elif [[ "$cmd" == "local" ]] && (( ${#args[@]} <= 1 )); then
        local error="tmuxvs:errorarg:local:$TMUXVS_TOOL"
        type "$error" &> /dev/null && "$error" || tmuxvs:errorarg:local
        exit;
    elif [[ "$cmd" == "run" ]] && (( ${#args[@]} <= 2 )); then
        local error="tmuxvs:errorarg:run:$TMUXVS_TOOL"
        type "$error" &> /dev/null && "$error" || tmuxvs:errorarg:run
        exit;
    elif [[ "$cmd" == "exec" ]] && (( ${#args[@]} <= 2 )); then
        local error="tmuxvs:errorarg:exec:$TMUXVS_TOOL"
        type "$error" &> /dev/null && "$error" || tmuxvs:errorarg:exec
        exit;
    fi

    tmux new-session -d -s $SESSION

    # NOTE: first command needs to have the target session specified, because
    # otherwise it chooses the last activate session and might break things there.

    tmux rename-window -t $SESSION:0 "$TMUXVS_TOOL"

    tmuxvs:setup-panes

    tmux select-layout tiled

    tmux set synchronize-panes on

    if [[ $cmd == "run" ]]; then
        tmuxvs:run
    elif [[ $cmd == "exec" ]]; then
        tmuxvs:exec
    fi

    echo "Created session '$SESSION' and activated synchronize"

    tmux list-sessions

    tmux attach-session -t $SESSION
}

tmuxvs:run() {
    local exec_cmd="${args[1]}"

    local command
    tmuxvs:run:$TMUXVS_TOOL "$exec_cmd"
    if [[ -n "$command" ]]; then
        tmux send-keys "$command" C-m
    fi
}

tmuxvs:exec() {
    local exec_cmd="${args[1]}"

    tmux send-keys "$exec_cmd" C-m
}

tmuxvs:setup-panes() {
    offset=1
    [[ $cmd == "run" || $cmd == "exec" ]] && offset=2

    for ((i = $offset; i < ${#args[@]}; i = i+1)); do
        local index=$(( i - $offset ))
        echo "$SESSION:0:$index ${args[$i]}"

        if (( $i > $offset )); then
            tmux split-window -h
        fi

        local command
        tmuxvs:local:$TMUXVS_TOOL
        if [[ -n "$command" ]]; then
            tmux send-keys "$command ${args[$i]}" C-m
        fi

    done
}


tmuxvs:errorarg:local() {
    cat <<EOM
Usage: $APPNAME local [<version>]+
EOM
}

tmuxvs:errorarg:run() {
    cat <<EOM
Usage: $APPNAME run '\$x = 23' [<version>]+
EOM
}

tmuxvs:errorarg:exec() {
    cat <<EOM
Usage: $APPNAME exec 'perl myapp.pl' [<version>]+
EOM
}

tmuxvs:errorarg() {
    cat <<EOM
Usage: $APPNAME (local|run|exec) <args>+
EOM
}

tmuxvs:main "$@"

